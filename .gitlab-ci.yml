#This template uses jdk8 for veryfying and deplyoing images
image: maven:3.3.9-jdk-8

#idea from Stackoverflow 
variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
#get back to root before and after script 


cache:
    paths:
        - .m2/repository
before_script:
    - cd $CI_PROJECT_DIR

after_script:
    - cd $CI_PROJECT_DIR

# Stages
stages: 
    - build
    - test
    - package
    - publish
    - deploy

# Build job service-registry
build_service_registry:
    stage: build
    script:
        - cd service-registry
        - mvn clean compile
    only:
        changes:
            - service-registry/**/*
# Build job compiler
build_compiler:
    stage: build
    script:
        - cd compiler
        - mvn clean compile    
    only:
      changes:
        - compiler/**/*
# Build job project
build_project:
    stage: build
    script:
        - cd project
        - mvn clean compile
    only:
        changes:
            - project/**/*

# Build job ui
build_ui:
    stage: build
    script:
        - cd UI
        - mvn clean compile
    only:
      changes:
        - UI/**/*
# Build job api-gateway
build_api_gateway:
    stage: build
    script:
        - cd api-gateway
        - mvn clean compile
    only:
        changes:
            - api-gateway/**/*
# Build UI/UI (Angular)
build_ui_angular:

    stage: build
    image: trion/ng-cli
    before_script:
        - cd UI/UI
        - npm ci
    script:
        - ng build
    only:
      changes:
        - UI/*+/*

# Test job compiler
test_compiler:
    stage: test
    script:
        - cd compiler
        - mvn test
    only:
      changes:
        - compiler/**/*
project-service:test:
    stage: test
    script:
        - cd project
        - mvn test
    services:
        - postgres:9.6
    variables:
        url: jdbc:postgresql://db:5432/my_db?user=admin&password=test
        POSTGRES_DB: my_db
        POSTGRES_PASSWORD: test
        POSTGRES_USER: admin
    only:
        changes:
            - project/**/*

# Package jobs
package_compiler:
    stage: package
    script:
        - cd compiler 
        - mvn package
    artifacts:
        paths:
            - compiler/target/*.jar
    variables:
        MAVEN_OPTS: "-DskipTests=true"
    only:
        changes:
            - compiler/*+/*

package_project:
    stage: package
    script:
        - cd project 
        - mvn package
    artifacts:
        paths:
            - project/target/*.jar
    variables:
        MAVEN_OPTS: "-DskipTests=true"
    only:
        changes:
            - project/**/*

package_ui:
    stage: package
    script:
        - cd UI 
        - mvn package
    artifacts:
        paths:
            - UI/target/*.jar
    variables:
        MAVEN_OPTS: "-DskipTests=true"
    only:
        changes:
            - UI/**/*

package_api-gateway:
    stage: package
    script:
        - cd api-gateway 
        - mvn package
    artifacts:
        paths:
            - api-gateway/target/*.jar
    variables:
        MAVEN_OPTS: "-DskipTests=true"
    only:
        changes:
            - api-gateway/**/*

package_service-registry:
    stage: package
    script:
        - cd service-registry
        - mvn package
    artifacts:
        paths:
            - service-registry/target/*.jar
    variables:
        MAVEN_OPTS: "-DskipTests=true"
    only:
        changes:
            - service-registry/**/*

# publish jobs
service-registry:publish:
    stage: publish
    image: docker:stable
    services:
        - docker:18-dind
    script:
        - cd service-registry/
        - docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker pull $IMAGE_NAME:latest || true
        - docker build --tag $IMAGE_NAME:latest .
        - docker push $IMAGE_NAME:latest
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_HOST: tcp://docker:2375
        IMAGE_NAME: $CI_REGISTRY_IMAGE/discovery-service
    only:
        changes:
            - service-registry/**/*

api-gateway:publish:
    stage: publish
    image: docker:stable
    services:
        - docker:18-dind
    script:
        - cd api-gateway/
        - docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker pull $IMAGE_NAME:latest || true
        - docker build --tag $IMAGE_NAME:latest .
        - docker push $IMAGE_NAME:latest
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_HOST: tcp://docker:2375
        IMAGE_NAME: $CI_REGISTRY_IMAGE/api-gateway-service
    only:
        changes:
            - api-gateway/**/*

project-service:publish:
    stage: publish
    image: docker:stable
    services:
        - docker:18-dind
    script:
        - cd project/
        - docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker pull $IMAGE_NAME:latest || true
        - docker build --tag $IMAGE_NAME:latest .
        - docker push $IMAGE_NAME:latest
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_HOST: tcp://docker:2375
        IMAGE_NAME: $CI_REGISTRY_IMAGE/project-service
    only:
        changes:
            - project/**/*

ui-service:publish:
    stage: publish
    image: docker:stable
    services:
        - docker:18-dind
    script:
        - cd UI/
        - docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker pull $IMAGE_NAME:latest || true
        - docker build --tag $IMAGE_NAME:latest .
        - docker push $IMAGE_NAME:latest
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_HOST: tcp://docker:2375
        IMAGE_NAME: $CI_REGISTRY_IMAGE/ui-service
    only:
        changes:
            - UI/**/*

compiler-service:publish:
    stage: publish
    image: docker:stable
    services:
        - docker:18-dind
    script:
        - cd compiler/
        - docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker pull $IMAGE_NAME:latest || true
        - docker build --tag $IMAGE_NAME:latest .
        - docker push $IMAGE_NAME:latest
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_HOST: tcp://docker:2375
        IMAGE_NAME: $CI_REGISTRY_IMAGE/compiler-service
    only:
        changes:
            - compiler/**/*


# deploy job
deploy:gcp:
    stage: deploy
    image: ubuntu:18.04
    script: 
        #Install ssh agent
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

        - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
        - scp -r docker-compose.prod.yml $SSH_HOST:~/
        - ssh $SSH_HOST "sudo docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY"
        - ssh $SSH_HOST "sudo docker-compose -f docker-compose.prod.yml pull && sudo docker-compose -f docker-compose.prod.yml up  --force-recreate -d"
    
    variables:
        SSH_HOST: malteradmann@34.69.193.177
    only:
        refs:
            - master    
