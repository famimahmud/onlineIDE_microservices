/*
 * Copyright 2016-2019 NXP
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
#include "platform.h"
#include "tcp_client.h"
#include "Cpu.h"

volatile int exit_code = 0;

// EXERCISE 8 interrupt handler
void sw4_RE_isr(void) {
	//CLear the Status FLag (15.2.3)
	PINS_DRV_ClearPinExIntFlag(0u);
	// SIUL2.ISR0
	// Toggle the LED1
	PINS_DRV_TogglePins(PTA, 0x1u << 10u); // 10000000000b = 1024
	// Start the tcp client when button is pressed
	start_tcp_client();
}

int main(void) {
	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
#ifdef PEX_RTOS_INIT
	PEX_RTOS_INIT(); /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
#endif
	/*** End of Processor Expert internal initialization.                    ***/
	/*EXERCISE 8 trigger tcp request when button is pressed */
	// Initialize internet connection of microcontroller
	status_t ret = STATUS_ERROR;
	ret = platform_init();

	// Wait until connection is established
	while (STATUS_ERROR == ret) {}

	// Initliaze GPIOs using SDK
	PINS_DRV_Init(NUM_OF_CONFIGURED_PINS, g_pin_mux_InitConfigArr);
	// Switch off the LED by writing the respective PIN. Ise the SDK-poovided function PINS_DRV_WritePin()
	PINS_DRV_WritePin(PTA, 10, 0x1u);

	// Initialize the EIRQ handler and enable the IRQ, external interrupt request
	INT_SYS_InstallHandler(SIUL_EIRQ_00_07_IRQn, &sw4_RE_isr, NULL);
	INT_SYS_EnableIRQ(SIUL_EIRQ_00_07_IRQn);

	/*** Don't write any code pass this line, or it will be deleted during code generation. ***/
	/*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
#ifdef PEX_RTOS_START
	PEX_RTOS_START(); /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
#endif
	/*** End of RTOS startup code.  ***/
	/*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
	for (;;) {
		if (exit_code != 0) {
			break;
		}
	}
	return exit_code;
	/*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/
/* END main */
/*!
 ** @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.1 [05.21]
 **     for the NXP C55 series of microcontrollers.
 **
 ** ###################################################################
 */
